// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`EntityGenerator generate entities from schema [mysql]: mysql-entity-dump 1`] = `
Array [
  "import { Entity, ManyToOne, PrimaryKey, Property } from 'mikro-orm';
import { Book2 } from './Book2';

@Entity()
export class Author2 {

  @PrimaryKey()
  id!: number;

  @Property({ length: 3, default: \`current_timestamp(3)\` })
  createdAt!: Date;

  @Property({ length: 3, default: \`current_timestamp(3)\` })
  updatedAt!: Date;

  @Property({ length: 255 })
  name!: string;

  @Property({ length: 255 })
  email!: string;

  @Property({ nullable: true })
  age?: number;

  @Property()
  termsAccepted: boolean = true;

  @Property({ nullable: true })
  optional?: boolean;

  @Property({ nullable: true })
  identities?: object;

  @Property({ columnType: 'date', nullable: true })
  born?: string;

  @Property({ columnType: 'time', nullable: true })
  bornTime?: string;

  @ManyToOne({ entity: () => Book2, nullable: true })
  favouriteBook?: Book2;

  @ManyToOne({ entity: () => Author2, nullable: true })
  favouriteAuthor?: Author2;

}
",
  "import { Cascade, Entity, ManyToOne } from 'mikro-orm';
import { Author2 } from './Author2';

@Entity()
export class Author2ToAuthor2 {

  @ManyToOne({ entity: () => Author2, fieldName: 'author2_1_id', cascade: [Cascade.ALL], primary: true })
  author21!: Author2;

  @ManyToOne({ entity: () => Author2, fieldName: 'author2_2_id', cascade: [Cascade.ALL], primary: true })
  author22!: Author2;

}
",
  "import { Cascade, Entity, ManyToOne } from 'mikro-orm';
import { Author2 } from './Author2';

@Entity()
export class AuthorToFriend {

  @ManyToOne({ entity: () => Author2, fieldName: 'author2_1_id', cascade: [Cascade.ALL], primary: true })
  author21!: Author2;

  @ManyToOne({ entity: () => Author2, fieldName: 'author2_2_id', cascade: [Cascade.ALL], primary: true })
  author22!: Author2;

}
",
  "import { Cascade, Entity, ManyToOne, PrimaryKey, Property } from 'mikro-orm';
import { Author2 } from './Author2';
import { Publisher2 } from './Publisher2';

@Entity()
export class Book2 {

  @PrimaryKey({ length: 36 })
  uuidPk!: string;

  @Property({ length: 3, default: \`current_timestamp(3)\` })
  createdAt!: Date;

  @Property({ length: 255, nullable: true })
  title?: string;

  @Property({ type: 'text', length: 65535, nullable: true })
  perex?: string;

  @Property({ type: 'float', nullable: true })
  price?: number;

  @Property({ type: 'double', nullable: true })
  double?: number;

  @Property({ nullable: true })
  meta?: object;

  @ManyToOne({ entity: () => Author2, cascade: [Cascade.MERGE] })
  author!: Author2;

  @ManyToOne({ entity: () => Publisher2, cascade: [Cascade.ALL], nullable: true })
  publisher?: Publisher2;

  @Property({ length: 255, nullable: true })
  foo?: string;

}
",
  "import { Cascade, Entity, ManyToOne, PrimaryKey } from 'mikro-orm';
import { Book2 } from './Book2';
import { BookTag2 } from './BookTag2';

@Entity()
export class Book2ToBookTag2 {

  @PrimaryKey()
  order!: number;

  @ManyToOne({ entity: () => Book2, cascade: [Cascade.ALL] })
  book2!: Book2;

  @ManyToOne({ entity: () => BookTag2, cascade: [Cascade.ALL] })
  bookTag2!: BookTag2;

}
",
  "import { Entity, PrimaryKey, Property } from 'mikro-orm';

@Entity()
export class BookTag2 {

  @PrimaryKey({ type: 'bigint' })
  id!: string;

  @Property({ length: 50 })
  name!: string;

}
",
  "import { Cascade, Entity, ManyToOne } from 'mikro-orm';
import { Book2 } from './Book2';
import { BookTag2 } from './BookTag2';

@Entity()
export class BookToTagUnordered {

  @ManyToOne({ entity: () => Book2, cascade: [Cascade.ALL], primary: true })
  book2!: Book2;

  @ManyToOne({ entity: () => BookTag2, cascade: [Cascade.ALL], primary: true })
  bookTag2!: BookTag2;

}
",
  "import { Entity, ManyToOne, PrimaryKey, Property } from 'mikro-orm';
import { Test2 } from './Test2';

@Entity()
export class Configuration2 {

  @PrimaryKey({ length: 255 })
  property!: string;

  @ManyToOne({ entity: () => Test2, primary: true })
  test!: Test2;

  @Property({ length: 255 })
  value!: string;

}
",
  "import { Entity, OneToOne, PrimaryKey, Property } from 'mikro-orm';
import { FooBaz2 } from './FooBaz2';

@Entity()
export class FooBar2 {

  @PrimaryKey()
  id!: number;

  @Property({ length: 255 })
  name!: string;

  @OneToOne({ entity: () => FooBaz2, nullable: true })
  baz?: FooBaz2;

  @OneToOne({ entity: () => FooBar2, nullable: true })
  fooBar?: FooBar2;

  @Property({ length: 3, default: \`current_timestamp(3)\` })
  version!: Date;

}
",
  "import { Entity, PrimaryKey, Property } from 'mikro-orm';

@Entity()
export class FooBaz2 {

  @PrimaryKey()
  id!: number;

  @Property({ length: 255 })
  name!: string;

  @Property({ length: 3, default: \`current_timestamp(3)\` })
  version!: Date;

}
",
  "import { Entity, ManyToOne, Property } from 'mikro-orm';
import { FooBar2 } from './FooBar2';
import { FooBaz2 } from './FooBaz2';

@Entity()
export class FooParam2 {

  @ManyToOne({ entity: () => FooBar2, primary: true })
  bar!: FooBar2;

  @ManyToOne({ entity: () => FooBaz2, primary: true })
  baz!: FooBaz2;

  @Property({ length: 255 })
  value!: string;

}
",
  "import { Entity, PrimaryKey, Property } from 'mikro-orm';

@Entity()
export class Publisher2 {

  @PrimaryKey()
  id!: number;

  @Property({ length: 255 })
  name!: string;

  @Property({ type: 'enum' })
  type!: string;

  @Property({ type: 'enum' })
  type2!: string;

  @Property({ nullable: true })
  enum1?: boolean;

  @Property({ nullable: true })
  enum2?: boolean;

  @Property({ nullable: true })
  enum3?: boolean;

  @Property({ type: 'enum', nullable: true })
  enum4?: string;

}
",
  "import { Cascade, Entity, ManyToOne, PrimaryKey } from 'mikro-orm';
import { Publisher2 } from './Publisher2';
import { Test2 } from './Test2';

@Entity()
export class Publisher2ToTest2 {

  @PrimaryKey()
  id!: number;

  @ManyToOne({ entity: () => Publisher2, cascade: [Cascade.ALL] })
  publisher2!: Publisher2;

  @ManyToOne({ entity: () => Test2, cascade: [Cascade.ALL] })
  test2!: Test2;

}
",
  "import { Cascade, Entity, OneToOne, PrimaryKey, Property } from 'mikro-orm';
import { Book2 } from './Book2';
import { FooBar2 } from './FooBar2';

@Entity()
export class Test2 {

  @PrimaryKey()
  id!: number;

  @Property({ length: 255, nullable: true })
  name?: string;

  @OneToOne({ entity: () => Book2, cascade: [Cascade.MERGE], nullable: true })
  book?: Book2;

  @Property()
  version: number = 1;

  @OneToOne({ entity: () => FooBar2, fieldName: 'foo___bar', nullable: true })
  fooBar?: FooBar2;

  @Property({ fieldName: 'foo___baz', nullable: true })
  fooBaz?: number;

}
",
]
`;

exports[`EntityGenerator generate entities from schema [postgres]: postgres-entity-dump 1`] = `
Array [
  "import { Entity, ManyToOne, PrimaryKey, Property } from 'mikro-orm';
import { Book2 } from './Book2';

@Entity()
export class Author2 {

  @PrimaryKey()
  id!: number;

  @Property({ length: 3, default: \`current_timestamp(3)\` })
  createdAt!: Date;

  @Property({ length: 3, default: \`current_timestamp(3)\` })
  updatedAt!: Date;

  @Property({ length: 255 })
  name!: string;

  @Property({ length: 255 })
  email!: string;

  @Property({ nullable: true })
  age?: number;

  @Property()
  termsAccepted: boolean = true;

  @Property({ nullable: true })
  optional?: boolean;

  @Property({ nullable: true })
  identities?: object;

  @Property({ type: 'date', nullable: true })
  born?: Date;

  @Property({ type: 'time', nullable: true })
  bornTime?: Date;

  @ManyToOne({ entity: () => Book2, nullable: true })
  favouriteBook?: Book2;

  @ManyToOne({ entity: () => Author2, nullable: true })
  favouriteAuthor?: Author2;

}
",
  "import { Cascade, Entity, ManyToOne } from 'mikro-orm';
import { Author2 } from './Author2';

@Entity()
export class Author2ToAuthor2 {

  @ManyToOne({ entity: () => Author2, fieldName: 'author2_1_id', cascade: [Cascade.ALL], primary: true })
  author21!: Author2;

  @ManyToOne({ entity: () => Author2, fieldName: 'author2_2_id', cascade: [Cascade.ALL], primary: true })
  author22!: Author2;

}
",
  "import { Cascade, Entity, ManyToOne } from 'mikro-orm';
import { Author2 } from './Author2';

@Entity()
export class AuthorToFriend {

  @ManyToOne({ entity: () => Author2, fieldName: 'author2_1_id', cascade: [Cascade.ALL], primary: true })
  author21!: Author2;

  @ManyToOne({ entity: () => Author2, fieldName: 'author2_2_id', cascade: [Cascade.ALL], primary: true })
  author22!: Author2;

}
",
  "import { Cascade, Entity, ManyToOne, PrimaryKey, Property } from 'mikro-orm';
import { Author2 } from './Author2';
import { Publisher2 } from './Publisher2';

@Entity()
export class Book2 {

  @PrimaryKey({ length: 36 })
  uuidPk!: string;

  @Property({ length: 3, default: \`current_timestamp(3)\` })
  createdAt!: Date;

  @Property({ length: 255, nullable: true })
  title?: string;

  @Property({ type: 'text', nullable: true })
  perex?: string;

  @Property({ type: 'float8', nullable: true })
  price?: number;

  @Property({ type: 'numeric', nullable: true })
  double?: number;

  @Property({ nullable: true })
  meta?: object;

  @ManyToOne({ entity: () => Author2, cascade: [Cascade.MERGE] })
  author!: Author2;

  @ManyToOne({ entity: () => Publisher2, cascade: [Cascade.ALL], nullable: true })
  publisher?: Publisher2;

  @Property({ length: 255, nullable: true })
  foo?: string;

}
",
  "import { Cascade, Entity, ManyToOne, PrimaryKey } from 'mikro-orm';
import { Book2 } from './Book2';
import { BookTag2 } from './BookTag2';

@Entity()
export class Book2ToBookTag2 {

  @PrimaryKey()
  order!: number;

  @ManyToOne({ entity: () => Book2, cascade: [Cascade.ALL] })
  book2!: Book2;

  @ManyToOne({ entity: () => BookTag2, cascade: [Cascade.ALL] })
  bookTag2!: BookTag2;

}
",
  "import { Entity, PrimaryKey, Property } from 'mikro-orm';

@Entity()
export class BookTag2 {

  @PrimaryKey({ type: 'int8' })
  id!: string;

  @Property({ length: 50 })
  name!: string;

}
",
  "import { Cascade, Entity, ManyToOne } from 'mikro-orm';
import { Book2 } from './Book2';
import { BookTag2 } from './BookTag2';

@Entity()
export class BookToTagUnordered {

  @ManyToOne({ entity: () => Book2, cascade: [Cascade.ALL], primary: true })
  book2!: Book2;

  @ManyToOne({ entity: () => BookTag2, cascade: [Cascade.ALL], primary: true })
  bookTag2!: BookTag2;

}
",
  "import { Entity, ManyToOne, PrimaryKey, Property } from 'mikro-orm';
import { Test2 } from './Test2';

@Entity()
export class Configuration2 {

  @PrimaryKey({ length: 255 })
  property!: string;

  @ManyToOne({ entity: () => Test2, primary: true })
  test!: Test2;

  @Property({ length: 255 })
  value!: string;

}
",
  "import { Entity, OneToOne, PrimaryKey, Property } from 'mikro-orm';
import { FooBaz2 } from './FooBaz2';

@Entity()
export class FooBar2 {

  @PrimaryKey()
  id!: number;

  @Property({ length: 255 })
  name!: string;

  @OneToOne({ entity: () => FooBaz2, nullable: true })
  baz?: FooBaz2;

  @OneToOne({ entity: () => FooBar2, nullable: true })
  fooBar?: FooBar2;

  @Property({ length: 3, default: \`current_timestamp(3)\` })
  version!: Date;

}
",
  "import { Entity, PrimaryKey, Property } from 'mikro-orm';

@Entity()
export class FooBaz2 {

  @PrimaryKey()
  id!: number;

  @Property({ length: 255 })
  name!: string;

  @Property({ length: 3, default: \`current_timestamp(3)\` })
  version!: Date;

}
",
  "import { Entity, ManyToOne, Property } from 'mikro-orm';
import { FooBar2 } from './FooBar2';
import { FooBaz2 } from './FooBaz2';

@Entity()
export class FooParam2 {

  @ManyToOne({ entity: () => FooBar2, primary: true })
  bar!: FooBar2;

  @ManyToOne({ entity: () => FooBaz2, primary: true })
  baz!: FooBaz2;

  @Property({ length: 255 })
  value!: string;

}
",
  "import { Entity, PrimaryKey, Property } from 'mikro-orm';

@Entity()
export class Label2 {

  @PrimaryKey({ type: 'uuid' })
  uuid!: string;

  @Property({ length: 255 })
  name!: string;

}
",
  "import { Entity, PrimaryKey, Property } from 'mikro-orm';

@Entity()
export class Publisher2 {

  @PrimaryKey()
  id!: number;

  @Property({ length: 255 })
  name!: string;

  @Property({ type: 'text' })
  type!: string;

  @Property({ type: 'text' })
  type2!: string;

  @Property({ type: 'int2', nullable: true })
  enum1?: number;

  @Property({ type: 'int2', nullable: true })
  enum2?: number;

  @Property({ type: 'int2', nullable: true })
  enum3?: number;

  @Property({ type: 'text', nullable: true })
  enum4?: string;

}
",
  "import { Cascade, Entity, ManyToOne, PrimaryKey } from 'mikro-orm';
import { Publisher2 } from './Publisher2';
import { Test2 } from './Test2';

@Entity()
export class Publisher2ToTest2 {

  @PrimaryKey()
  id!: number;

  @ManyToOne({ entity: () => Publisher2, cascade: [Cascade.ALL] })
  publisher2!: Publisher2;

  @ManyToOne({ entity: () => Test2, cascade: [Cascade.ALL] })
  test2!: Test2;

}
",
  "import { Cascade, Entity, OneToOne, PrimaryKey, Property } from 'mikro-orm';
import { Book2 } from './Book2';

@Entity()
export class Test2 {

  @PrimaryKey()
  id!: number;

  @Property({ length: 255, nullable: true })
  name?: string;

  @OneToOne({ entity: () => Book2, cascade: [Cascade.MERGE], nullable: true })
  book?: Book2;

  @Property()
  version: number = 1;

  @Property({ columnType: 'polygon', nullable: true })
  path?: string;

}
",
]
`;

exports[`EntityGenerator generate entities from schema [sqlite]: sqlite-entity-dump 1`] = `
Array [
  "import { Entity, ManyToOne, PrimaryKey, Property } from 'mikro-orm';
import { Book3 } from './Book3';

@Entity()
export class Author3 {

  @PrimaryKey()
  id!: number;

  @Property({ nullable: true })
  createdAt?: Date;

  @Property({ nullable: true })
  updatedAt?: Date;

  @Property()
  name!: string;

  @Property()
  email!: string;

  @Property({ nullable: true })
  age?: number;

  @Property()
  termsAccepted!: number;

  @Property({ nullable: true })
  identities?: string;

  @Property({ columnType: 'date', nullable: true })
  born?: string;

  @Property({ columnType: 'time', nullable: true })
  bornTime?: string;

  @ManyToOne({ entity: () => Book3, nullable: true })
  favouriteBook?: Book3;

}
",
  "import { Entity, ManyToOne, PrimaryKey, Property } from 'mikro-orm';
import { Author3 } from './Author3';
import { Publisher3 } from './Publisher3';

@Entity()
export class Book3 {

  @PrimaryKey()
  id!: number;

  @Property({ nullable: true })
  createdAt?: Date;

  @Property({ nullable: true })
  updatedAt?: Date;

  @Property()
  title!: string;

  @Property({ nullable: true })
  foo?: string;

  @ManyToOne({ entity: () => Author3, nullable: true })
  author?: Author3;

  @ManyToOne({ entity: () => Publisher3, nullable: true })
  publisher?: Publisher3;

}
",
  "import { Cascade, Entity, ManyToOne, PrimaryKey } from 'mikro-orm';
import { Book3 } from './Book3';
import { BookTag3 } from './BookTag3';

@Entity()
export class Book3ToBookTag3 {

  @PrimaryKey()
  id!: number;

  @ManyToOne({ entity: () => Book3, cascade: [Cascade.ALL], nullable: true })
  book3?: Book3;

  @ManyToOne({ entity: () => BookTag3, cascade: [Cascade.ALL], nullable: true })
  bookTag3?: BookTag3;

}
",
  "import { Entity, PrimaryKey, Property } from 'mikro-orm';

@Entity()
export class BookTag3 {

  @PrimaryKey()
  id!: number;

  @Property()
  name!: string;

  @Property({ default: \`current_timestamp\` })
  version!: Date;

}
",
  "import { Entity, PrimaryKey, Property } from 'mikro-orm';

@Entity()
export class Publisher3 {

  @PrimaryKey()
  id!: number;

  @Property()
  name!: string;

  @Property()
  type!: string;

}
",
  "import { Cascade, Entity, ManyToOne, PrimaryKey } from 'mikro-orm';
import { Publisher3 } from './Publisher3';
import { Test3 } from './Test3';

@Entity()
export class Publisher3ToTest3 {

  @PrimaryKey()
  id!: number;

  @ManyToOne({ entity: () => Publisher3, cascade: [Cascade.ALL], nullable: true })
  publisher3?: Publisher3;

  @ManyToOne({ entity: () => Test3, cascade: [Cascade.ALL], nullable: true })
  test3?: Test3;

}
",
  "import { Entity, PrimaryKey, Property } from 'mikro-orm';

@Entity()
export class Test3 {

  @PrimaryKey()
  id!: number;

  @Property({ nullable: true })
  name?: string;

  @Property()
  version: number = 1;

}
",
]
`;
